{"version":3,"sources":["pages/NoMatch.js","components/ThemeProvider.js","components/header.js","components/footer.js","components/aboutbody.js","components/datingcard.js","utils/API.js","pages/Matches.js","pages/UpdateProfile.js","pages/CreateProfile.js","App.js","serviceWorker.js","index.js"],"names":["NoMatch","sx","maxWidth","mx","px","role","aria-label","props","theme","children","Header","color","bg","alignItems","variant","href","p","fontWeight","Footer","AboutBody","DatingCard","width","src","name","bio","id","axios","get","Matches","useState","users","setUsers","useEffect","API","then","res","data","catch","err","console","log","map","user","UpdateProfile","match","setMatch","useParams","firstName","lastname","CreateProfile","App","ThemeProvider","exact","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d7939110.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Text,\n  Box\n} from 'rebass';\n\n\nfunction NoMatch() {\n  return (\n    <Box\n    sx={{\n    maxWidth: 512,\n    mx: 'auto',\n    px: 3,\n    }}>\n    <Text>404 Page Not Found</Text>\n    <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n      ðŸ™„\n    </span>\n    </Box>\n  );\n}\n\nexport default NoMatch;\n","import React from 'react'\nimport { ThemeProvider } from 'emotion-theming'\nimport theme from '@rebass/preset'\nexport default props =>\n  <ThemeProvider theme={theme}>\n    {props.children}\n  </ThemeProvider>","import React from 'react'\nimport {\n  Box,\n  Flex,\n  Link\n} from 'rebass'\n\nfunction Header(){\nreturn(\n<Flex\n  px={2}\n  color='white'\n  bg='black'\n  alignItems='center'>\n  <Link variant='nav' href='/' p={2} fontWeight='bold'>LinkUp</Link>\n  <Box mx='auto' />\n  <Link variant='nav' href=\"/create\" p={2}>Create Profile</Link>\n  <Link variant='nav' href=\"/update\" p={2}>Update Profile</Link>\n  <Link variant='nav' href=\"/matches\" p={2}>View Matches</Link>\n</Flex>\n);\n}\n\nexport default Header;\n","import React from 'react'\nimport {\n  Text,\n  Flex,\n} from 'rebass'\n\nfunction Footer(){\nreturn(\n<Flex\n  px={2}\n  color='white'\n  bg='black'\n  alignItems='center'>\n  <Text p={2} fontWeight='bold'>LinkUp</Text>\n</Flex>\n);\n}\n\nexport default Footer;","import React from 'react'\n\nfunction AboutBody(){\n    return (<div>About</div>);\n}\nexport default AboutBody;","import React from 'react'\nimport {\n  Card,\n  Text,\n  Flex,\n  Image\n} from 'rebass'\n\nfunction DatingCard(props){\nreturn(\n<Flex>\n  <Card width={[ 256, 320 ]} mx='auto'>\n    <Image src='https://source.unsplash.com/random/512x384?space' />\n    <Text>\n     {props.name}\n     {props.bio}\n    </Text>\n  </Card>\n</Flex>\n\n);\n}\n\nexport default DatingCard;\n\n","import axios from \"axios\";\n\nexport default {\n  // Gets all books\n  getMatches: function() {\n    return axios.get(\"/api/matches\");\n  },\n  // Gets the book with the given id\n  getMatch: function(id) {\n    return axios.get(\"/api/matches/\" + id);\n  },\n  // Deletes the book with the given id\n  deleteMatch: function(id) {\n    return axios.delete(\"/api/matches/\" + id);\n  },\n  // Saves a book to the database\n  saveMatch: function(matchData) {\n    return axios.post(\"/api/matches\", matchData);\n  },\n\n  getUsers: function() {\n    return axios.get(\"/api/users\");\n  }\n};\n","import React, {useState, useEffect} from \"react\";\nimport DatingCard from '../components/datingcard';\nimport API from \"../utils/API\";\n\nfunction Matches(){\n    const [users, setUsers] = useState([])\n    useEffect(() => {\n    loadUsers()\n      }, [])\n    \n      // Loads all books and sets them to books\n      function loadUsers() {\n        API.getUsers()\n          .then(res => \n            setUsers(res.data)\n          )\n          .catch(err => console.log(err));\n      };\n    return (\n        <div>\n        {users.map(user => <DatingCard user = {user} />)}\n        </div>\n    );\n}\n\nexport default Matches;","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport API from \"../utils/API\";\nimport Header from '../components/header';\nimport Footer from '../components/footer';\nimport DatingCard from '../components/datingcard';\nimport {\n  Text,\n  Flex,\n  Box\n} from 'rebass';\n\nfunction UpdateProfile(props) {\n    const [match, setMatch] = useState({})\n  \n    // When this component mounts, grab the book with the _id of props.match.params.id\n    // e.g. localhost:3000/books/599dcb67f0f16317844583fc\n    const {id} = useParams()\n    useEffect(() => {\n      API.getMatch(id)\n        .then(res => setMatch(res.data))\n        .catch(err => console.log(err));\n    })\n  \n    return (\n      <div>\n        <Header></Header>\n        <Flex alignItems='center'>\n          <Box width={1/3} px={2}>\n            <Text p={1} color='background' bg='primary'>\n              {match.firstName} {match.lastname}\n            </Text>\n          </Box>\n        </Flex>\n        <Box\n            sx={{\n            maxWidth: 512,\n            mx: 'auto',\n            px: 3,\n        }}>\n        <DatingCard></DatingCard>\n        </Box>\n        <Footer></Footer>\n        </div>\n      );\n    }\n  \n  \n  export default UpdateProfile;\n  ","import React from \"react\";\nimport {\n    Text\n  } from 'rebass';\n\nfunction CreateProfile(){\n    return (\n        <Text>create profile</Text>\n    );\n}\n\nexport default CreateProfile;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport NoMatch from \"./pages/NoMatch\";\nimport ThemeProvider from './components/ThemeProvider';\nimport Header from './components/header';\nimport Footer from './components/footer';\nimport AboutBody from './components/aboutbody';\nimport Matches from './pages/Matches';\nimport UpdateProfile from './pages/UpdateProfile';\nimport CreateProfile from './pages/CreateProfile';\n\nfunction App() {\n  return (\n    <ThemeProvider>\n       <Router>\n      <div>\n        <Header>\n        <Switch>\n          <Route exact path={[\"/\", \"/home\"]}>\n          </Route>\n          <Route exact path=\"/update\">\n            <UpdateProfile />\n          </Route>\n          <Route exact path=\"/create\">\n            <CreateProfile />\n          </Route>\n          <Route exact path=\"/matches\">\n            <Matches />\n          </Route>\n          <Route>\n            <NoMatch />\n          </Route>\n        </Switch>\n        </Header>\n      </div>\n    </Router>\n    <div>\n    <AboutBody></AboutBody>\n    <Footer></Footer>\n    </div>\n    </ThemeProvider>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
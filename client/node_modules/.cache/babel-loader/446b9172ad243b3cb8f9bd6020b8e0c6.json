{"ast":null,"code":"/**\n * This function checks if the element className passed in parameters\n *\n * @since 0.0.6\n * @module css/has\n * @category Element\n * @param {...Array} [arrays] The arrays to process.\n * @param {Function} iteratee The function to combine\n *  grouped values.\n * @returns {Array} Returns the new array of grouped elements.\n * @see unzip, unzipWith, zip, zipObject, zipObjectDeep, zipWith\n * @example\n *\n * has(element, 'show');\n * // => [111, 222]\n */\nfunction has(element, className) {\n  if (!element || !className) {\n    return false;\n  }\n\n  return !!element.className.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'));\n}\n/**\n * This function adds className to the element's attribute class\n *\n * @since 0.0.6\n * @module css/add\n * @category css\n * @param {HTMLElement} element Related element\n * @param {String} className the className to add\n *  grouped values.\n * @returns {HTMLElement} The augmented element\n * @example\n *\n * add(element, 'hidden');\n * // => <div class=\"element hidden\">...</div>\n */\n\n\nfunction add(element, className) {\n  if (!element || !className) {\n    return;\n  }\n\n  var classNames = className.split(' ');\n\n  for (var i = 0; i < classNames.length; i++) {\n    var cn = classNames[i];\n\n    if (!has(element, cn)) {\n      element.classList.add(cn);\n    }\n  }\n\n  return element;\n}\n/**\n * This function removes className to the element's attribute class\n *\n * @since 0.0.6\n * @module css/remove\n * @category css\n * @param {HTMLElement} element Related element\n * @param {String} className the className to add\n * @returns {HTMLElement} The element with the removed className\n * @example\n *\n * remove(element, 'hidden');\n * // => <div class=\"element\">...</div>\n */\n\n\nfunction remove(element, className) {\n  if (!element || !className) {\n    return;\n  }\n\n  element.classList.remove(className);\n  return element;\n}\n/**\n * This function toggles className from the element's attribute class\n *\n * @since 0.0.6\n * @module css/toggle\n * @category Element\n * @param {HTMLElement} element Related element\n * @param {String} className the className to add\n *  grouped values.\n * @returns {HTMLElement} The modified element\n * @example\n *\n * toggle(element, 'hidden');\n * // => <div class=\"element\">...</div>\n * toggle(element, 'hidden');\n * // => <div class=\"element hidden\">...</div>\n */\n\n\nfunction toggle(element, className) {\n  if (has(element, className)) {\n    remove(element, className);\n  } else {\n    add(element, className);\n  }\n\n  return element;\n}\n\nexport default {\n  has: has,\n  add: add,\n  remove: remove,\n  toggle: toggle\n};","map":null,"metadata":{},"sourceType":"module"}
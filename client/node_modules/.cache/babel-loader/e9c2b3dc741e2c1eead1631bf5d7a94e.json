{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport create from './element/create';\nimport insert from './element/insert';\nimport css from './module/css';\nimport attach from './module/attach';\nimport emitter from './module/emitter';\nimport Button from './button';\nimport iconBack from './skin/material/icon/back.svg';\nimport iconForward from './skin/material/icon/forward.svg';\nvar defaults = {\n  prefix: 'material',\n  class: 'calendar',\n  target: '.week-day',\n  functions: ['newEvent'],\n  rangedays: 7,\n  months: ['January', 'February', 'Mars', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  days: ['Sunday', 'Monday', 'Tuesday', 'wednesday', 'Thursday', 'Friday', 'Saturday'],\n  mode: 'view',\n  range: [8, 18],\n  display: 'three',\n  weekend: [0, 1],\n  events: [['root.dblclick', 'add']]\n};\n/**\n * List view class\n * @class\n * @param {Object} options Default options for view\n * @extends {View}\n * @since 0.0.4\n * @author Jerome Vial\n *\n * @type {prime}\n */\n\nvar Calendar = /*#__PURE__*/function () {\n  /**\n   * init\n   * @return {Object} The class options\n   */\n  function Calendar(options) {\n    _classCallCheck(this, Calendar);\n\n    this.options = Object.assign({}, defaults, options || {});\n    this.init();\n    this.build();\n    this.attach();\n    return this;\n  }\n  /**\n   * [_initView description]\n   * @return  Class instance\n   */\n\n\n  _createClass(Calendar, [{\n    key: \"init\",\n    value: function init(options) {\n      // assign modules\n      Object.assign(this, emitter, attach); // init function\n\n      this._initFunction(this.options.functions);\n\n      this.date = this.options.date || new Date();\n      this.firstDay = this.getFirstDayOfWeek(this.date);\n      this.firstDay.setHours(0);\n      this.firstDay.setMinutes(0);\n      this.firstDay.setSeconds(0);\n      return this;\n    }\n    /**\n     * getMonday\n     * @param  {Date} d\n     * @return {Date}\n     */\n\n  }, {\n    key: \"getFirstDayOfWeek\",\n    value: function getFirstDayOfWeek(d) {\n      d = new Date(d);\n      var day = d.getDay();\n      var diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\n\n      return new Date(d.setDate(diff));\n    }\n    /**\n     * [_initFunction description]\n     * @param  {?} functions [description]\n     * @return {?}           [description]\n     */\n\n  }, {\n    key: \"_initFunction\",\n    value: function _initFunction(functions) {\n      functions = functions || [];\n\n      for (var i = 0; i < functions.length; i++) {\n        var name = functions[i];\n\n        if (this.options[name]) {\n          this[name] = this.options[name];\n        }\n      }\n    }\n    /**\n     * [_initList description]\n     * @param  {Object} options this class options\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      // define main tag\n      var tag = this.options.tag || 'div';\n      this.root = create(tag, this.options.prefix + '-' + this.options.class);\n      this.buildWeek();\n\n      if (this.options.container) {\n        insert(this.root, this.options.container);\n      }\n\n      return this;\n    }\n    /**\n     * [buildWeek description]\n     * @return {[type]} [description]\n     */\n\n  }, {\n    key: \"buildWeek\",\n    value: function buildWeek() {\n      this.buildHeader();\n      this.buildAllDay();\n      this.buildBody();\n      this.body.scrollTop = 480;\n      return this;\n    }\n    /**\n     * [buildHeader description]\n     * @return {[type]} [description]\n     */\n\n  }, {\n    key: \"buildHeader\",\n    value: function buildHeader() {\n      this.header = create('header');\n      insert(this.header, this.root);\n      this.buildHeadline();\n      var element = create('div');\n      insert(element, this.header);\n      css.add(element, 'header-days');\n      var date = new Date(this.firstDay);\n      var days = this.options.rangedays;\n      var margin = create('div');\n      css.add(margin, 'margin');\n      insert(margin, element);\n\n      for (var i = 0; i < days; i++) {\n        var dow = this.options.days[date.getDay()];\n        var dom = date.getMonth() + 1 + '/' + date.getDate();\n        var cell = create('div');\n        cell.innerHTML = '<div class=\"first\">' + dow + '</div><div class=\"second\">' + dom + '</div>';\n        css.add(cell, 'date');\n        insert(cell, element);\n        date.setDate(date.getDate() + 1);\n      }\n    }\n    /**\n     * [buildHeadline description]\n     * @return {?} [description]\n     */\n\n  }, {\n    key: \"buildHeadline\",\n    value: function buildHeadline() {\n      this.headline = create('div', this.options.class + '-headline');\n      insert(this.headline, this.header);\n      var year = this.firstDay.getFullYear();\n      var month = this.options.months[this.firstDay.getMonth()];\n      var monthIndex = create('div', 'month-year');\n      monthIndex.innerHTML = '<b>' + month + '</b> ' + year;\n      insert(monthIndex, this.headline);\n      this.buildNavigation();\n    }\n    /**\n     * [buildNavigation description]\n     * @return {?} [description]\n     */\n\n  }, {\n    key: \"buildNavigation\",\n    value: function buildNavigation() {\n      var _this = this;\n\n      var navigation = create('div', this.options.prefix + '-toolbar');\n      insert(navigation, this.headline);\n      var back = new Button({\n        icon: iconBack,\n        style: 'dense'\n      }).on('click', function () {\n        _this.back();\n      }).insert(navigation);\n      css.add(back.root, 'compact');\n      var today = new Button({\n        style: 'dense',\n        label: 'today'\n      }).on('click', function () {\n        _this.goto();\n      }).insert(navigation);\n      css.add(today.root, 'compact');\n      var next = new Button({\n        icon: iconForward,\n        style: 'dense'\n      }).on('click', function () {\n        _this.next();\n      }).insert(navigation);\n      css.add(next.root, 'compact');\n    }\n    /**\n     * [_initAllDay description]\n     * @param  {?} head [description]\n     * @return {?}      [description]\n     */\n\n  }, {\n    key: \"buildAllDay\",\n    value: function buildAllDay() {\n      var allday = create('div', 'allday');\n      insert(allday, this.header);\n      var dow = new Date(this.firstDay);\n      var days = this.options.rangedays;\n      var label = create('label', 'label');\n      label.innerHTML = 'all-day';\n      insert(label, allday);\n\n      for (var i = 0; i < days; i++) {\n        var day = create('div', 'date');\n        day.setAttribute('data-date', this.dateToString(dow));\n        insert(day, allday);\n        dow.setDate(dow.getDate() + 1);\n      }\n    }\n    /**\n     * [_initBody description]\n     * @param  {?} content [description]\n     * @return {?}         [description]\n     */\n\n  }, {\n    key: \"buildBody\",\n    value: function buildBody() {\n      var cells = [];\n      var firstDay = this.firstDay;\n      var days = this.options.rangedays;\n      this.body = create('div');\n      css.add(this.body, this.options.class + '-body');\n      insert(this.body, this.root);\n      var hours = create('div');\n      css.add(hours, 'hours');\n      insert(hours, this.body);\n      this.initCanvas();\n\n      for (var i = 0; i < 24; i++) {\n        var hour = create('div');\n        css.add(hour, 'hour');\n        insert(hour, hours);\n        hour.innerHTML = i + ':00';\n      }\n\n      var sday = new Date(firstDay);\n\n      for (var k = 0; k < days; k++) {\n        var day = create('div');\n        css.add(day, 'week-day');\n        day.setAttribute('data-date', this.dateToString(sday));\n        insert(day, this.body);\n        sday.setDate(sday.getDate() + 1);\n      }\n\n      this.cells = cells; // content.scrollTop = 460;\n    }\n    /**\n     * _dateToString\n     * @param  {Date} d\n     * @return {Date}\n     */\n\n  }, {\n    key: \"dateToString\",\n    value: function dateToString(d) {\n      var day = d.getDate();\n      var month = d.getMonth() + 1;\n      var year = d.getFullYear();\n\n      if (day < 10) {\n        day = '0' + day;\n      }\n\n      if (month < 10) {\n        month = '0' + month;\n      }\n\n      var date = year + '-' + month + '-' + day;\n      return date;\n    }\n    /**\n     * [_initCanvas description]\n     * @param  {?} content [description]\n     * @return {?}         [description]\n     */\n\n  }, {\n    key: \"initCanvas\",\n    value: function initCanvas() {\n      var canvas = create('canvas');\n      css.add(canvas, 'canvas');\n      canvas.width = '2000';\n      canvas.height = '1440';\n      insert(canvas, this.body);\n      var ctx = canvas.getContext('2d');\n      ctx.lineWidth = 0.5;\n      ctx.strokeStyle = '#dedbdb';\n      var offset = 6;\n\n      for (var j = 0; j <= 24; j++) {\n        ctx.beginPath();\n\n        if (j < this.options.range[0] - 1 || j > this.options.range[1] - 1) {\n          ctx.strokeStyle = '#F2F2F2';\n        } else {\n          ctx.strokeStyle = '#D9D9D9';\n        }\n\n        var y = j * 60 + 0.5;\n        ctx.moveTo(0, y + 60 + offset);\n        ctx.lineTo(2000, y + 60 + offset);\n        ctx.stroke();\n      }\n    }\n    /**\n     * [onSelect description]\n     * @param  {?} e [description]\n     * @return {?}   [description]\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(e) {\n      if (e.target && e.target.matches(this.options.target)) {\n        var data = e.target.getAttribute('data-date');\n        var d = data.split(/-/);\n        var time = this.roundTime(e.offsetY / 60);\n        var h = parseInt(time);\n        var m = (time - h) * 60;\n        var date = new Date(d[0], d[1], d[2], h, m);\n        this.emit('add', date);\n      }\n    }\n    /**\n     * [roundTime description]\n     * @param  {?} value [description]\n     * @return {?}       [description]\n     */\n\n  }, {\n    key: \"roundTime\",\n    value: function roundTime(value) {\n      var step = 0.5;\n      var inv = 1.0 / step;\n      return Math.round(value * inv) / inv;\n    }\n    /**\n     * Setter\n     * @param {string} prop\n     * @param {string} value\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(prop, value, options) {\n      console.log('set calendart', prop, value);\n\n      switch (prop) {\n        case 'week':\n          this.setWeek(value, options);\n          break;\n\n        default:\n          this.setWeek(value, options);\n      }\n\n      return this;\n    }\n    /**\n     * Set list\n     * @param {Array} list List of info object\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"setWeek\",\n    value: function setWeek(data) {\n      this.buildWeek(data);\n      return this;\n    }\n    /**\n     * next\n     * @return {void}\n     */\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      this.firstDay.setDate(this.firstDay.getDate() + this.options.rangedays);\n      this.root.innerHTML = '';\n      this.buildWeek();\n    }\n    /**\n     * back\n     * @return {void}\n     */\n\n  }, {\n    key: \"back\",\n    value: function back() {\n      this.firstDay.setDate(this.firstDay.getDate() - this.options.rangedays);\n      this.root.innerHTML = '';\n      this.buildWeek();\n    }\n    /**\n     * [goto description]\n     * @param  {?} date [description]\n     * @return {?}      [description]\n     */\n\n  }, {\n    key: \"goto\",\n    value: function goto(date) {\n      date = date || new Date();\n      this.firstDay = this.getFirstDayOfWeek(this.date);\n      this.root.innerHTML = '';\n      this.buildWeek();\n    }\n  }, {\n    key: \"newEvent\",\n    value: function newEvent(date) {// console.log('new Event', date);\n    }\n  }, {\n    key: \"empty\",\n    value: function empty() {\n      console.log('empty');\n      this.root.innerHTML = '';\n    }\n  }]);\n\n  return Calendar;\n}();\n\nexport default Calendar;","map":null,"metadata":{},"sourceType":"module"}
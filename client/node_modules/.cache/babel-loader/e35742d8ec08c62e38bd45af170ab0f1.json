{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport create from './component/create';\nimport control from './component/control';\nimport ripple from './component/ripple';\nimport _insert from './element/insert';\nimport emitter from './module/emitter';\nimport attach from './module/attach';\nvar defaults = {\n  prefix: 'material',\n  class: 'button',\n  tag: 'button',\n  ripple: false,\n  events: [['root.click', 'handleClick'], ['root.mouseover', 'handleMouseOver']]\n};\n/**\n * Class that represents a button\n * @class\n * @since 0.0.1\n * @example\n * var button = new Button({\n *   label: 'Button raised',\n *   type: 'raised',\n *   color: 'primary'\n * }).on('click', function(e) {\n *   console.log('button click', e);\n * }).insert(document.body);\n */\n\nvar Button = /*#__PURE__*/function () {\n  /**\n   * The init method of the Button class\n   * @param  {Object} options [description]\n   * @private\n   * @return {Object} The class instance\n   */\n  function Button(options) {\n    _classCallCheck(this, Button);\n\n    this.init(options);\n    this.build();\n    this.setup();\n    this.attach();\n    this.emit('ready');\n    return this;\n  }\n  /**\n   * [init description]\n   * @param  {?} options [description]\n   * @return {?}         [description]\n   */\n\n\n  _createClass(Button, [{\n    key: \"init\",\n    value: function init(options) {\n      this.options = Object.assign({}, defaults, options || {});\n      Object.assign(this, control, emitter, attach);\n      this.element = this.element || {}; // init module$\n\n      if (this.options.ripple) {\n        ripple(this);\n      }\n\n      this.emit('init');\n    }\n    /**\n     * Build button's method\n     * @override\n     * @return {void}\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      this.element = {};\n      this.root = create(this.options);\n      this.options.label = this.options.label || this.options.text;\n      this.root.setAttribute('aria-label', this.options.label || this.options.name);\n\n      if (this.options.title) {\n        this.root.setAttribute('title', this.options.title);\n      }\n\n      this.label(this.options.label);\n      this.icon(this.options.icon);\n\n      if (this.options.tooltip) {\n        this.root.dataset.tooltip = this.options.tooltip;\n      }\n\n      if (this.options.container) {\n        if (this.options.container.root) {\n          this.container = this.options.container.root;\n        } else {\n          this.container = this.options.container;\n        }\n\n        _insert(this.root, this.options.container);\n      }\n\n      this.emit('built', this.root);\n      return this;\n    }\n    /**\n     * insert method\n     * @param  {?} container [description]\n     * @param  {?} context   [description]\n     * @return {?}           [description]\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(container, context) {\n      _insert(this.root, container, context);\n\n      return this;\n    }\n    /**\n     * Setup method\n     * @return {?} [description]\n     */\n\n  }, {\n    key: \"setup\",\n    value: function setup() {\n      this.element.input = this.root;\n\n      if (this.options.name) {\n        this.root.dataset.name = this.options.name;\n      } // if (this.options.label) {\n      //   this.root.title = this.options.label\n      // }\n\n\n      if (this.options.content) {\n        this.root.innerHTML = this.options.content;\n      }\n\n      if (this.options.disabled === true) {\n        this.disable();\n      }\n    }\n    /**\n     * Setter\n     * @param {string} prop\n     * @param {string} value\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(prop, value) {\n      switch (prop) {\n        case 'disabled':\n          this.disable(value);\n          break;\n\n        case 'value':\n          this.setValue(value);\n          break;\n\n        case 'label':\n          this.setLabel(value);\n          break;\n\n        default:\n          this.setValue(prop);\n      }\n\n      return this;\n    }\n    /**\n     * [buildLabel description]\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"setLabel\",\n    value: function setLabel(label) {\n      label = label || this.options.label;\n      var text = label;\n\n      if (label === null || label === false) {\n        text = '';\n      } else if (label) {\n        text = label;\n      } else if (this.options.label) {\n        text = label;\n      } else {\n        text = this.options.name;\n      }\n\n      if (!this.element.label) {\n        this.label(text);\n      } else {\n        this.element.label.textContent = text;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.container.removeChild(this.root);\n    }\n    /**\n     * method handleClick\n     * @param  {event} e\n     * @return {void}\n     */\n\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(e) {\n      e.preventDefault();\n      if (this.disabled === true) return;\n      if (this.options.upload) return; // this.publish('click');\n\n      this.emit('click', e);\n      return this;\n    }\n    /**\n     * method handleClick\n     * @param  {event} e\n     * @return {void}\n     */\n\n  }, {\n    key: \"handleMouseOver\",\n    value: function handleMouseOver(e) {\n      e.preventDefault(); // console.log('mouse over', e.target)\n\n      if (e.target.dataset.tooltip) {// console.log(e.target.dataset.tooltip)\n      }\n\n      return this;\n    }\n  }]);\n\n  return Button;\n}();\n\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}
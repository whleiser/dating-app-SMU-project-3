{"ast":null,"code":"import create from '../element/create';\nimport css from '../module/css';\nimport insert from '../element/insert';\nvar KEYCODE = {\n  ENTER: 13,\n  SPACE: 32\n};\nvar control = {\n  /**\n   * [toggle description]\n   * @return {Object} The class instance\n   */\n  toggle: function toggle() {\n    if (this.disabled) return;\n    this.focus();\n\n    if (this.checked) {\n      this.check(false);\n    } else {\n      this.check(true);\n    }\n\n    return this;\n  },\n\n  /**\n   * Set checkbox value\n   * @param {boolean} value [description]\n   */\n  check: function check(checked) {\n    if (checked === true) {\n      css.add(this.root, 'is-checked');\n      this.element.input.checked = true;\n      this.checked = true;\n      this.emit('change', this.checked);\n    } else {\n      css.remove(this.root, 'is-checked');\n      this.element.input.checked = false;\n      this.checked = false;\n      this.emit('change', this.checked);\n    }\n\n    return this;\n  },\n\n  /**\n   * [initLabel description]\n   * @return {?} [description]\n   */\n  label: function label(_label, container) {\n    if (!_label) return;\n    this.element = this.element || {};\n\n    if (!this.element.label) {\n      this.element.label = create('label', this.options.class + '-label');\n    }\n\n    this.element.label.textContent = _label;\n    container = container || this.root;\n    insert(this.element.label, container);\n  },\n\n  /**\n   * [_initIcon description]\n   * @param  {string} type\n   * @return {string}\n   */\n  icon: function icon(_icon, container, position) {\n    if (!_icon) return;\n    container = container || this.root;\n    position = position || 'top';\n\n    if (this.options.type === 'text-icon') {\n      position = 'bottom';\n    }\n\n    this.element = this.element || {};\n    this.element.icon = create('i', this.options.class + '-icon');\n    insert(this.element.icon, container, position);\n    this.element.icon.innerHTML = _icon;\n  },\n\n  /**\n   * [initLabel description]\n   * @return {?} [description]\n   */\n  error: function error(_error) {\n    _error = _error || this.options.error;\n    if (this.options.error === null) return;\n    var text = this.options.error || this.options.text;\n\n    if (!this.element.error) {\n      this.element.error = create('error', this.options.class + '-error');\n    }\n\n    if (text) {\n      this.element.error.textContent = text;\n    }\n\n    insert(this.element.error, this.root, 'bottom');\n  },\n  disable: function disable() {\n    this.disabled = true;\n    this.element.input.setAttribute('disabled', 'disabled');\n    css.add(this.root, 'is-disabled');\n    return this;\n  },\n  enable: function enable() {\n    this.disabled = false;\n    this.element.input.removeAttribute('disabled');\n    css.remove(this.root, 'is-disabled');\n    return this;\n  },\n  keydown: function keydown(e) {\n    if (e.altKey) return;\n\n    switch (e.keyCode) {\n      case KEYCODE.ENTER:\n      case KEYCODE.SPACE:\n        e.preventDefault();\n        this.toggle(e);\n        break;\n\n      default:\n        break;\n    }\n  },\n\n  /**\n   * Setter\n   * @param {string} prop\n   * @param {string} value\n   * @return {Object} The class instance\n   */\n  get: function get(prop) {\n    switch (prop) {\n      case 'name':\n        this.getName();\n        break;\n      // case 'value':\n      //   this.setValue(prop)\n      //   break\n      // case 'label':\n      //   this.setLabel(prop)\n      //   break\n\n      default:\n        this.setValue(prop);\n    }\n\n    return this;\n  },\n  getName: function getName() {\n    return this.root.dataset.name;\n  },\n\n  /**\n   * [_onInputFocus description]\n   * @return {?} [description]\n   */\n  focus: function focus() {\n    if (this.disabled === true) return this;\n    css.add(this.root, 'is-focused');\n\n    if (this.element.input !== document.activeElement) {\n      this.element.input.focus();\n    }\n\n    return this;\n  },\n\n  /**\n   * [_onInputBlur description]\n   * @return {?} [description]\n   */\n  blur: function blur() {\n    css.remove(this.root, 'is-focused');\n    return this;\n  }\n};\nexport default control;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict'; // import insert from './component/insert'\n\nimport _classCallCheck from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport css from './module/css';\nimport _insert from './element/insert';\nimport control from './component/control';\nvar defaults = {\n  prefix: 'material',\n  class: 'image',\n  tag: 'div'\n};\n/**\n * The item class is used for example as item list\n *\n * @class\n * @extends {Component}\n * @return {Object} The class instance\n * @example new Item(object);\n */\n\nvar Image = /*#__PURE__*/function () {\n  /**\n   * init\n   * @return {Object} The class options\n   */\n  function Image(options) {\n    _classCallCheck(this, Image);\n\n    this.init(options);\n    this.build();\n    return this;\n  }\n  /**\n   * [init description]\n   * @param  {?} options [description]\n   * @return {?}         [description]\n   */\n\n\n  _createClass(Image, [{\n    key: \"init\",\n    value: function init(options) {\n      this.options = Object.assign({}, defaults, options || {});\n      Object.assign(this, control);\n    }\n    /**\n     * Build function for item\n     * @return {Object} This class instance\n     */\n\n  }, {\n    key: \"build\",\n    value: function build(options) {\n      options = options || this.options;\n      var tag = options.tag || 'div';\n      var text = options.text || options.label;\n      this.root = document.createElement(tag); // if (options.src) {\n      //   this.root.setAttribute('style', 'background-image: url(' + options.src + ')')\n\n      if (options.src) {\n        this.image = document.createElement('img');\n        this.image.setAttribute('src', options.src);\n        css.add(this.image, this.options.class + '-image');\n\n        _insert(this.image, this.root);\n      }\n\n      this.info = document.createElement('span');\n      css.add(this.info, this.options.class + '-info');\n\n      _insert(this.info, this.root);\n\n      this.label(text, this.info); // this.label = this.element.label\n\n      this.icon(this.options.icon, this.info, 'bottom'); // if (text) {\n      //   this.label = document.createElement('span')\n      //   this.label.innerText = text\n      //   css.add(this.label, this.options.class + '-label')\n      //   insert(this.label, this.root)\n      // }\n\n      css.add(this.root, this.options.prefix + '-' + this.options.class);\n\n      if (options.css) {\n        css.add(this.root, options.css);\n      } // css.add(this.root, this.options.class + '-adjust');\n\n\n      if (this.options.container) {\n        this.insert(this.options.container);\n      }\n    }\n    /**\n     * [insert description]\n     * @param  {?} container [description]\n     * @param  {?} context   [description]\n     * @return {?}           [description]\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(container, context) {\n      _insert(this.root, container, context);\n\n      return this;\n    }\n    /**\n     * Get or set text value of the element\n     * @param {string} value The text to set\n     * @returns {*}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(value) {\n      if (value) {\n        if (this.root.innerText) {\n          this.root.innerText = value;\n        } else {\n          this.root.textContent = value;\n        }\n\n        return this;\n      }\n\n      return this;\n    }\n  }]);\n\n  return Image;\n}();\n\nexport default Image;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Item from './item';\nimport Divider from './divider'; // import init from './component/init'\n\nimport emitter from './module/emitter';\nimport _insert from './element/insert';\nimport css from './module/css';\nimport attach from './module/attach';\nvar defaults = {\n  prefix: 'material',\n  class: 'list',\n  tag: 'ul',\n  functions: ['render', 'select'],\n  target: 'LI',\n  events: [['root.click', 'handleSelect']]\n};\n/**\n * List view class\n * @class\n * @param {Object} options Default options for view\n * @extends {View}\n * @since 0.0.4\n * @author Jerome Vial\n *\n * @type {prime}\n */\n\nvar List = /*#__PURE__*/function () {\n  /**\n   * init\n   * @return {Object} The class options\n   */\n  function List(options) {\n    _classCallCheck(this, List);\n\n    this.options = Object.assign({}, defaults, options || {});\n    this.init(this.options);\n    this.build(this.options);\n    this.attach(this.options.events);\n    return this;\n  }\n  /**\n   * [_initView description]\n   * @return  Class instance\n   */\n\n\n  _createClass(List, [{\n    key: \"init\",\n    value: function init() {\n      this.filters = [];\n      this.data = [];\n      this.items = []; // assign modules\n\n      Object.assign(this, emitter, attach); // init function\n\n      this._initFunction(this.options.functions);\n\n      return this;\n    }\n    /**\n     * [_initFunction description]\n     * @param  {?} functions [description]\n     * @return {?}           [description]\n     */\n\n  }, {\n    key: \"_initFunction\",\n    value: function _initFunction(functions) {\n      for (var i = 0; i < functions.length; i++) {\n        var name = functions[i];\n\n        if (this.options[name]) {\n          this[name] = this.options[name];\n        }\n      }\n    }\n    /**\n     * [_initList description]\n     * @param  {Object} options this class options\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"build\",\n    value: function build(options) {\n      // define main tag\n      var tag = this.options.tag || 'ul';\n      this.root = document.createElement(tag);\n      css.add(this.root, 'material-' + this.options.class);\n\n      if (options.name) {\n        css.add(this.root, options.class + '-' + options.name);\n      }\n\n      if (options.type) {\n        css.add(this.root, 'type-' + options.type);\n      }\n\n      if (options.layout) {\n        css.add(this.root, 'layout-' + options.layout);\n      }\n\n      if (this.options.list) {\n        this.set('list', this.options.list);\n      }\n\n      if (this.options.container) {\n        _insert(this.root, this.options.container);\n      } // this.root.addEventListener(\"click\", function(e) {\n      //   // console.log(\"list\", this, e);\n      //   // e.target was the clicked element\n      // });\n\n\n      return this;\n    }\n    /**\n     * [onSelect description]\n     * @param  {?} e [description]\n     * @return {?}   [description]\n     */\n\n  }, {\n    key: \"handleSelect\",\n    value: function handleSelect(e) {\n      // console.log('handleSelect-', e.currentTarget, this.options.target)\n      e.stopPropagation();\n\n      if (e.target === e.currentTarget) {\n        return;\n      }\n\n      if (e && e.target) {\n        var el = e.target; // console.log('el', el, el.matches(this.options.target))\n\n        while (el && !el.matches(this.options.target)) {\n          el = el.parentNode;\n        }\n\n        css.remove(this.item, 'is-selected');\n        css.add(el, 'is-selected');\n        this.select(el, e, this.item);\n        this.item = el;\n      }\n    }\n    /**\n     * select\n     * @param  {Element} item  [description]\n     * @param  {event} event The caller event\n     * @return        [description]\n     */\n\n  }, {\n    key: \"select\",\n    value: function select(item, e, selected) {\n      this.emit('select', item);\n    }\n    /**\n     * [render description]\n     * @param  {?} info [description]\n     * @return {?}      [description]\n     */\n\n  }, {\n    key: \"render\",\n    value: function render(info) {\n      var item;\n\n      if (info.type === 'divider') {\n        item = new Divider();\n      } else {\n        item = new Item({\n          name: info.name,\n          text: info.text || info.name\n        });\n      }\n\n      return item;\n    }\n    /**\n     * Setter\n     * @param {string} prop\n     * @param {string} value\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(prop, value, options) {\n      // console.log('set', prop, value)\n      switch (prop) {\n        case 'list':\n          this.setList(value, options);\n          break;\n\n        default:\n          this.setList(prop, options);\n      }\n\n      return this;\n    }\n    /**\n     * Set list\n     * @param {Array} list List of info object\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"setList\",\n    value: function setList(list) {\n      for (var i = 0; i < list.length; i++) {\n        this.addItem(this.render(list[i]), i);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"scrollToBottom\",\n    value: function scrollToBottom() {\n      this.root.scrollTop = this.root.scrollHeight - this.root.getBoundingClientRect().height;\n    }\n    /**\n     * [add description]\n     * @param {Object} item [description]\n     */\n\n  }, {\n    key: \"addItem\",\n    value: function addItem(item\n    /*, index */\n    ) {\n      if (!item) {\n        return;\n      }\n\n      var where = 'bottom';\n\n      if (item.root) {\n        _insert(item.root, this.root, where);\n      } else {\n        _insert(item, this.root, where);\n      }\n\n      this.items.push(item);\n      return item;\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(container, context) {\n      _insert(this.root, container, context);\n    }\n  }, {\n    key: \"empty\",\n    value: function empty() {\n      this.root.innerHTML = '';\n      this.items = [];\n      this.item = null;\n    }\n    /**\n     * Reverse the list order\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"reverse\",\n    value: function reverse() {\n      this.list.reverse();\n      this.update(this.list);\n      return this;\n    }\n  }]);\n\n  return List;\n}();\n\nexport default List;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Layout from './layout';\nimport create from './component/create';\nimport insert from './component/insert';\nvar defaults = {\n  prefix: 'material',\n  class: 'item',\n  type: 'default',\n  tag: 'li',\n  types: {\n    default: 'span',\n    display4: 'h1',\n    display3: 'h1',\n    display2: 'h1',\n    display1: 'h1',\n    headline: 'h1',\n    title: 'h2',\n    subheading2: 'h3',\n    subheading1: 'h4',\n    body: 'p',\n    body2: 'aside',\n    caption: 'span'\n  }\n};\n/**\n * The class represents an item ie for list\n *\n * @class\n * @return {Object} The class instance\n * @example new Item(object);\n */\n\nvar Item = /*#__PURE__*/function () {\n  /**\n   * init\n   * @return {Object} The class options\n   */\n  function Item(options) {\n    _classCallCheck(this, Item);\n\n    this.init(options);\n    this.build();\n    return this;\n  }\n  /**\n   * [init description]\n   * @param  {?} options [description]\n   * @return {?}         [description]\n   */\n\n\n  _createClass(Item, [{\n    key: \"init\",\n    value: function init(options) {\n      // merge options\n      this.options = Object.assign({}, defaults, options || {}); // define class\n      // assign modules\n\n      Object.assign(this, insert);\n    }\n    /**\n     * Build function for item\n     * @return {Object} This class instance\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      // define main tag\n      this.options.tag = this.options.tag || this.options.types[this.options.type];\n      this.options.tag = this.options.tag;\n      this.root = create(this.options);\n\n      if (this.options.text) {\n        this.set(this.options.text);\n      }\n\n      if (this.options.layout) {\n        this.layout = new Layout(this.options.layout, this.root);\n      } else {\n        if (this.options.container) {\n          this.insert(this.options.container);\n        }\n      }\n    }\n    /**\n     * Get or set text value of the element\n     * @param {string} value The text to set\n     * @returns {*}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(value) {\n      if (value) {\n        if (this.root.innerText) {\n          this.root.innerText = value;\n        } else {\n          this.root.textContent = value;\n        }\n\n        return this;\n      }\n\n      return this;\n    }\n  }]);\n\n  return Item;\n}();\n\nexport default Item;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport emitter from './module/emitter';\nimport attach from './module/attach';\nvar defaults = {\n  prefix: 'material',\n  class: 'textfield',\n  type: 'control',\n  tag: 'div',\n  events: [// 'change': '_onChange',\n  ['input.focus', 'focus'], ['input.blur', 'blur'], // ['input.keypress', '_handleInputKeyPress',\n  ['input.keyup', '_handleInputKeyPress'] // ['input.change', '_onChange']\n  // 'input.keydown': '_handleInputKeyPress'\n  ]\n};\n/**\n * Textfield class\n * @class\n */\n\nvar Textfield = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   * @param  {Object} options - Component options\n   * @return {Object} Class instance\n   */\n  function Textfield(options) {\n    _classCallCheck(this, Textfield);\n\n    this.options = Object.assign({}, defaults, options || {});\n    this.init();\n    this.build();\n    this.attach();\n    return this;\n  }\n  /**\n   * init\n   * @param  {Object} options The class options\n   * @return {Object} The class instance\n   */\n\n\n  _createClass(Textfield, [{\n    key: \"init\",\n    value: function init() {\n      Object.assign(this, emitter, attach);\n      this.value = this.options.value;\n      this.readonly = this.options.readonly;\n      this.disabled = this.options.disabled;\n      return this;\n    }\n    /**\n     * [build description]\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      // create a new div as input element\n      var tag = this.options.tag || 'div';\n      this.root = document.createElement(tag);\n      this.root.classList.add(this.options.prefix + '-' + this.options.class);\n      this.buildLabel();\n      this.buildInput();\n      this.buildUnderline();\n\n      if (this.disabled) {\n        css.add(this.root, 'is-disabled');\n      } // insert if container this.options is given\n\n\n      if (this.options.container) {\n        // console.log(this.name, opts.container);\n        insert(this.root, this.options.container);\n      }\n    }\n  }, {\n    key: \"buildLabel\",\n    value: function buildLabel() {\n      this.label = document.createElement('label');\n      this.label.classList.add(this.options.class + '-label');\n      this.root.appendChild(this.label);\n\n      if (this.options.label !== false) {\n        this.setLabel();\n      }\n    }\n    /**\n     * [_initInput description]\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"buildInput\",\n    value: function buildInput() {\n      this.input = document.createElement('input');\n      this.input.classList.add(this.options.class + '-input');\n      this.input.setAttribute('type', 'text');\n      this.root.appendChild(this.input);\n\n      if (this.options.name) {\n        this.input.setAttribute('name', this.options.name);\n      }\n\n      if (!this.options.value) {\n        this.root.classList.add('is-empty');\n      }\n\n      if (this.readonly) {\n        this.input.setAttribute('readonly', 'readonly');\n        this.input.setAttribute('tabindex', '-1');\n      }\n\n      return this.input;\n    }\n    /**\n     * _initUnderline\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"buildUnderline\",\n    value: function buildUnderline() {\n      this.underline = document.createElement('span');\n      this.underline.classList.add(this.options.class + '-underline');\n      this.root.appendChild(this.underline);\n    }\n    /**\n     * Setter\n     * @param {string} prop\n     * @param {string} value\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(prop, value, options) {\n      switch (prop) {\n        case 'value':\n          this.setValue(value, options);\n          break;\n\n        case 'label':\n          this.setLabel(value, options);\n          break;\n\n        case 'disabled':\n          if (value === true) {\n            this.disable();\n          } else if (value === false) {\n            this.enable();\n          }\n\n          break;\n\n        default:\n          this.setValue(prop, value);\n      }\n\n      return this;\n    }\n    /**\n     * [buildLabel description]\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"setLabel\",\n    value: function setLabel(label) {\n      label = label || this.options.label;\n      var text;\n\n      if (label === null || label === false) {\n        text = '';\n      } else if (this.options.label) {\n        text = label;\n      } else {\n        text = this.options.name;\n      }\n\n      this.label.textContent = text;\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.disabled = true;\n      this.input.setAttribute('disabled', 'disabled');\n      this.root.classList.add('is-disabled');\n      return this;\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      this.disabled = false;\n      this.element.input.removeAttribute('disabled');\n      this.root.classList.remove('is-disabled');\n      return this;\n    }\n    /**\n     * Getter\n     * @param {string} prop\n     * @param {string} value\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(prop) {\n      var value;\n\n      switch (prop) {\n        case 'value':\n          value = this.getValue();\n          break;\n\n        case 'name':\n          value = this.name;\n          break;\n\n        default:\n          return this.getValue();\n      }\n\n      return value;\n    }\n    /**\n     * [getValue description]\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      // console.log('getValue', this);\n      return this.input.value;\n    }\n    /**\n     * [setValue description]\n     * @param {string} value [description]\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(value, silent) {\n      // console.log('setValue', value, silent);\n      this.input.value = value;\n\n      if (value) {\n        this.root.classList.remove('is-empty');\n      } else {\n        this.root.classList.add('is-empty');\n      }\n\n      if (!silent) {\n        this.emit('change', value);\n      }\n    }\n    /**\n     * [_initValue description]\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"_initValue\",\n    value: function _initValue() {\n      var opts = this.options; // create a new div as input element\n\n      if (opts.value) {\n        this.setValue(opts.value);\n      }\n    }\n    /**\n     * [_onFocus description]\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"_handleInputKeyPress\",\n    value: function _handleInputKeyPress(e) {\n      // console.log('_handleInputKeyPress', e);\n      if (this.readonly) return;\n\n      if (this.get('value') === '') {\n        this.root.classList.add('is-empty');\n      } else {\n        this.root.classList.remove('is-empty');\n      }\n\n      this.emit('change', this.getValue());\n    }\n    /**\n     * focus method\n     * @return {?} [description]\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (this.disabled) return this;\n      if (this.readonly) return this;\n      this.root.classList.add('is-focused');\n\n      if (this.input !== document.activeElement) {\n        this.input.focus();\n      }\n\n      return this;\n    }\n    /**\n     * blur method\n     * @return {?} [description]\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      if (this.readonly) return this;\n      this.root.classList.remove('is-focused');\n      return this;\n    }\n    /**\n     * [setError description]\n     * @param {string} error Error description\n     */\n\n  }, {\n    key: \"setError\",\n    value: function setError(error) {\n      if (error) {\n        this.addClass('field-error');\n\n        if (this.error) {\n          this.error.set('html', error);\n        }\n      } else {\n        if (this.error) {\n          this.removeClass('field-error');\n        }\n\n        if (this.error) {\n          this.error.set('html', '');\n        }\n      }\n    }\n  }]);\n\n  return Textfield;\n}();\n\nexport default Textfield;","map":null,"metadata":{},"sourceType":"module"}
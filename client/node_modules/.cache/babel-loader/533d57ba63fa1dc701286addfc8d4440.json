{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport events from './component/events';\nimport control from './component/control';\nimport label from './component/label';\nimport _insert from './element/insert';\nimport _build from './element/build';\nimport emitter from './module/emitter';\nimport attach from './module/attach';\nimport css from './module/css';\nimport icon from './skin/material/icon/checkbox.svg'; // element related modules\n\nvar defaults = {\n  prefix: 'material',\n  class: 'checkbox',\n  type: 'control',\n  // modules: [events, control, emitter, attach],\n  build: ['$root.material-checkbox', {}, ['input$input', {}], ['span$control.checkbox-control']],\n  events: [['element.control.click', 'click', {}], ['element.label.click', 'toggle', {}], // for accessibility purpose\n  // ['element.input.click', 'toggle', {}],\n  ['element.input.focus', 'focus'], ['element.input.blur', 'blur'], ['element.input.keydown', 'keydown', {}]]\n};\n/**\n * Checkbox control class\n * @class\n * @extends Control\n * @since 0.0.1\n * @example\n * var chkbox = checkbox({\n *   label: 'Primary raised button',\n *   type: 'raised',\n *   primary: true\n * }).on('click', function(e) {\n *   console.log('button click', e);\n * }).insert(document.body);\n */\n\nvar Checkbox = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   * @param  {Object} options - Component options\n   * @return {Object} Class instance\n   */\n  function Checkbox(options) {\n    _classCallCheck(this, Checkbox);\n\n    this.init(options);\n    this.build();\n    this.attach();\n    return this;\n  }\n  /**\n   * Constructor\n   * @param  {Object} options The class options\n   * @return {Object} This class instance\n   */\n\n\n  _createClass(Checkbox, [{\n    key: \"init\",\n    value: function init(options) {\n      this.options = Object.assign({}, defaults, options || {});\n      Object.assign(this, events, control, emitter, attach);\n      return this;\n    }\n    /**\n     * build the component using the super method\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      this.element = _build(this.options.build);\n      this.root = this.element.root;\n      this.element.control.innerHTML = icon;\n      var text = this.options.text || this.options.label;\n      this.element.label = label(this.root, text, this.options);\n      this.element.input.setAttribute('type', 'checkbox');\n      this.element.input.setAttribute('name', this.options.name);\n      this.element.input.setAttribute('aria-label', this.options.name);\n\n      if (this.options.value) {\n        this.element.input.setAttribute('value', this.options.value);\n      }\n\n      if (this.options.disabled) {\n        this.disabled = this.options.disabled;\n        this.element.input.setAttribute('disabled', 'disabled');\n        css.add(this.root, 'is-disabled');\n      }\n\n      if (this.options.checked) {\n        this.check(true);\n      }\n\n      if (this.options.value) {\n        this.set('value', this.value);\n      } // insert if container options is given\n\n\n      if (this.options.container) {\n        _insert(this.root, this.options.container);\n      }\n\n      return this;\n    }\n    /**\n     * Setter\n     * @param {string} prop\n     * @param {string} value\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(prop, value) {\n      switch (prop) {\n        case 'checked':\n          this.check(value);\n          break;\n\n        case 'value':\n          this.setValue(value);\n          break;\n\n        case 'label':\n          this.setLabel(value);\n          break;\n\n        default:\n          this.check(prop);\n      }\n\n      return this;\n    }\n    /**\n     * [insert description]\n     * @param  {?} container [description]\n     * @param  {?} context   [description]\n     * @return {?}           [description]\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(container, context) {\n      _insert(this.root, container, context);\n\n      return this;\n    }\n    /**\n     * [click description]\n     * @param  {event} e [description]\n     * @return {?}   [description]\n     */\n\n  }, {\n    key: \"click\",\n    value: function click(e) {\n      this.toggle(e);\n      this.element.input.focus();\n      return this;\n    }\n    /**\n     * Set checkbox value\n     * @param {boolean} value [description]\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      console.log('setValue', value);\n      this.value = value;\n      this.element.input.setAttribute('value', value);\n      return this;\n    }\n  }]);\n\n  return Checkbox;\n}();\n\nexport default Checkbox;","map":null,"metadata":{},"sourceType":"module"}
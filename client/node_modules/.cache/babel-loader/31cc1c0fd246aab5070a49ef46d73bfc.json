{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport create from './component/create';\nimport insert from './component/insert';\nimport offset from './element/offset';\nvar defaults = {\n  prefix: 'material',\n  class: 'toolbar',\n  tag: 'div'\n};\n\nvar Toolbar = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   * @param  {Object} options - Component options\n   * @return {Object} Class instance\n   */\n  function Toolbar(options) {\n    _classCallCheck(this, Toolbar);\n\n    this.init(options);\n    this.build();\n    this.attach();\n    return this;\n  }\n\n  _createClass(Toolbar, [{\n    key: \"init\",\n    value: function init(options) {\n      this.options = Object.assign({}, defaults, options || {});\n      Object.assign(this, insert); // console.log('waterfALL', this.options.waterfall)\n\n      this.waterfall = this.options.waterfall;\n    }\n    /**\n     * Build Method\n     * @return {Object} This class instance\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      this.root = create(this.options); // console.log(this.options.height, this.options.fixed)\n\n      if (this.options.height) {\n        this.root.style.height = this.options.height + 'px';\n      }\n\n      if (this.options.fixed) {\n        // console.log('is-fixed')\n        this.root.classList.add('is-fixed');\n      }\n\n      if (this.options.flexible) {\n        this.root.classList.add('is-flexible');\n      } // if (this.options.container) {\n      //   this.insert(this.options.container)\n      // }\n\n\n      return this;\n    }\n  }, {\n    key: \"attach\",\n    value: function attach() {\n      var _this = this;\n\n      this.root.addEventListener('DOMNodeInserted', function (e) {\n        var textNode = e.target;\n        if (textNode !== _this.root) return;\n        var size = _this.size = offset(_this.root, 'height');\n        var view = _this.view = _this.root.parentNode; // console.log('view', view)\n\n        var padding = window.getComputedStyle(view)['padding-top']; // console.log('paddingTop', padding)\n        // if (!padding) padding = window.getComputedStyle(this.root.parentNode, 'padding')\n        // console.log('padding', padding)\n\n        padding = parseInt(padding, 10); // size = parseInt(size, 10)\n\n        _this.padding = padding; // console.log(' toolbar inserted in', size, 'padding', padding)\n\n        var ptop = _this.ptop = size + padding; // console.log('ptop', ptop)\n\n        if (document.body == view) {\n          // console.log('toolbar container body')\n          _this.root.classList.add('toolbar-body');\n        } // view.setAttribute('style', 'padding-top: ' + ptop + 'px')\n\n\n        _this.scroll(view);\n      });\n    }\n    /**\n     * Setter\n     * @param {string} prop\n     * @param {string} value\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(prop, value) {\n      switch (prop) {\n        case 'minimize':\n          this.root.setAttribute('style', 'height: 64px');\n          break;\n\n        case 'value':\n          this.setValue(value);\n          break;\n\n        case 'label':\n          this.setLabel(value);\n          break;\n\n        default:\n          this.check(prop);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"scroll\",\n    value: function scroll(view) {\n      var _this2 = this;\n\n      // console.log('initScroll')\n      var isBody = false;\n      var element = view;\n      this.scrolling = view;\n\n      if (view === document.body) {\n        isBody = true;\n        element = document;\n        this.scrolling = document.body;\n      }\n\n      view.classList.add();\n      element.addEventListener('scroll', function (e) {\n        var scrollTop;\n\n        if (isBody) {\n          scrollTop = (document.documentElement || document.body.parentNode || document.body).scrollTop;\n        } else {\n          scrollTop = view.scrollTop;\n        }\n\n        if (scrollTop > 0) {\n          _this2.root.classList.add('is-scrolled');\n        } else {\n          _this2.root.classList.remove('is-scrolled');\n        } // console.log('scroll', scrollTop)\n\n\n        _this2.update(e, scrollTop);\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(e, scrollTop) {\n      if (this.options.fixed) {\n        this.fixed(e, scrollTop);\n      }\n\n      if (this.options.flexible) {\n        this.flexible(e, scrollTop);\n      }\n    }\n  }, {\n    key: \"flexible\",\n    value: function flexible(e, scrollTop) {\n      var size = offset(this.root, 'height'); // console.log('flexible', size, this.root.offsetHeight, scrollTop)\n      // if (scrollTop < this.size) {\n      //\n\n      var height = '64';\n\n      if (size < height) {\n        this.root.style.height = height + 'px';\n      } else {\n        height = this.size - scrollTop;\n        if (height < 64) height = 64;\n        this.root.style.height = height + 'px';\n      } // console.log('scroll', this.root.style.top, scrollTop)\n      // if (scrollTop > 50) {\n      //   this.root.style.trans = scrollTop + 'px'\n      // } else {\n      //   this.root.style.top = scrollTop + 'px'\n      // }\n      // }\n      // this.root.style.top = scrollTop + 'px'\n      // this.root.style.height = this.size - scrollTop\n      // } else {\n      //   console.log('size scroll', this.size, scrollTop)\n      //   this.root.style.height = this.size - scrollTop + 'px'\n      //   // this.root.style.top = scrollTop + 'px'\n      // }\n\n    }\n  }, {\n    key: \"fixed\",\n    value: function fixed(e, scrollTop) {\n      if (scrollTop > 0) {\n        this.root.style.transform = 'translateY(' + scrollTop + 'px)';\n      } else {\n        this.root.style.transform = 'translateY(' + scrollTop + 'px)';\n      }\n    }\n  }, {\n    key: \"waterfall$\",\n    value: function waterfall$(e) {}\n  }]);\n\n  return Toolbar;\n}();\n\nexport default Toolbar;","map":null,"metadata":{},"sourceType":"module"}
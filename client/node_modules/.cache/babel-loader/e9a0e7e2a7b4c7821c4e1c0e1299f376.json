{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport create from './component/create';\nimport insert from './component/insert';\nvar defaults = {\n  prefix: 'material',\n  class: 'text',\n  type: 'default',\n  types: {\n    default: 'span',\n    display4: 'h1',\n    display3: 'h1',\n    display2: 'h1',\n    display1: 'h1',\n    headline: 'h1',\n    title: 'h2',\n    subheading2: 'h3',\n    subheading1: 'h4',\n    body: 'p',\n    body2: 'aside',\n    caption: 'span'\n  }\n};\n/**\n * this class creates a text component\n *\n * @since 0.0.6\n * @category Element\n * @param {HTMLElement} element Related element\n * @param {String} className the className to add\n *  grouped values.\n * @returns {HTMLElement} The modified element\n * @example\n *\n * var text = new Text({\n *   text: 'hello',\n *   type: 'title'\n * }).insert(document.body);\n *\n * // => Hello\n */\n\nvar Text = /*#__PURE__*/function () {\n  /**\n   * init\n   * @return {Object} The class options\n   */\n  function Text(options) {\n    _classCallCheck(this, Text);\n\n    this.init(options);\n    this.build();\n    return this;\n  }\n\n  _createClass(Text, [{\n    key: \"init\",\n    value: function init(options) {\n      this.options = Object.assign({}, defaults, options || {});\n      Object.assign(this, insert);\n    }\n    /**\n     * Build function for item\n     * @return {Object} This class instance\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      this.options.tag = this.options.types[this.options.type];\n      this.root = create(this.options);\n\n      if (this.options.text) {\n        this.set(this.options.text);\n      }\n\n      if (this.options.container) {\n        this.insert(this.options.container);\n      }\n\n      return this;\n    }\n    /**\n     * Get or set text value of the element\n     * @param {string} value The text to set\n     * @returns {*}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(value) {\n      if (value) {\n        this.root.textContent = value;\n      } else {\n        this.root.textContent = '';\n      }\n\n      return this;\n    }\n  }]);\n\n  return Text;\n}();\n\nexport default Text;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import css from '../module/css';\n/**\n * Classify component related functions\n * @module component/classify\n * @category component\n */\n\n/**\n * Init component class\n * @param  {element} element The component root element\n * @param  {object} options component class options\n * @return {Instance} The Class instance\n *\n */\n\nfunction classify(element, options) {\n  css.add(element, options.prefix + '-' + options.class);\n\n  if (options.name) {\n    css.add(element, options.class + '-' + options.name);\n  }\n\n  if (options.type) {\n    // css.add(element, options.class + '-' + options.type)\n    css.add(element, 'type-' + options.type);\n  }\n\n  if (options.color) {\n    css.add(element, options.color + '-color');\n  }\n\n  if (options.css) {\n    css.add(element, options.css);\n  }\n\n  if (options.elevation) {\n    css.add(element, 'elevation-z' + options.elevation);\n  }\n\n  if (options.name) {\n    // console.log('name', options.name)\n    element.dataset.name = options.name;\n  }\n\n  if (options.label) {\n    element.title = options.label;\n  }\n\n  if (options.style) {\n    var styles = options.style.split(' ');\n\n    for (var i = 0; i < styles.length; i++) {\n      css.add(element, 'style-' + styles[i]);\n    }\n  }\n\n  if (options.data) {\n    for (var property in options.data) {\n      if (options.data.hasOwnProperty(property)) {\n        element.dataset[property] = options.data[property];\n      }\n    }\n  }\n\n  if (options.theme) {\n    element.classList.add(options.theme + '-theme');\n  }\n}\n\nexport default classify;","map":null,"metadata":{},"sourceType":"module"}
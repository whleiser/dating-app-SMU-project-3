{"ast":null,"code":"import attribute from './attribute';\nimport create from './create';\nimport insert from './insert';\n\nfunction isObject(object) {\n  return object && typeof object === 'object' && Object.getPrototypeOf(object) === Object.getPrototypeOf({});\n}\n\nfunction process(string) {\n  var tags = string.match(/^[\\w-]+/);\n  var ids = string.match(/#([\\w-]+)/);\n  var classes = string.match(/\\.[\\w-]+/g);\n  var names = string.match(/\\$([\\w-]+)/);\n  var properties = {\n    tag: tags ? tags[0] : 'div'\n  };\n  if (ids) properties.id = ids[1];\n  if (names) properties.name = names[1];\n\n  if (classes) {\n    properties.class = classes.join(' ').replace(/\\./g, '');\n  }\n\n  return properties;\n}\n\nfunction build(schema, container, object, level) {\n  var element;\n  object = object || {};\n\n  for (var i = 0; i < schema.length; i++) {\n    if (typeof schema[i] === 'string') {\n      var property = process(schema[i]);\n      element = create(property.tag, property.class);\n      insert(element, container);\n\n      if (property.name) {\n        object[property.name] = element;\n      }\n    } else if (isObject(schema[i])) {\n      attribute.init(element, schema[i]);\n    } else if (Array.isArray(schema[i])) {\n      build(schema[i], element, object, level);\n    }\n  }\n\n  return object;\n}\n\nexport default build;","map":null,"metadata":{},"sourceType":"module"}
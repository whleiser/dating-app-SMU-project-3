{"ast":null,"code":"'use strict';\n/**\n * Element insertion related methods\n * @module module/dom\n */\n\n/**\n * Inserts content specified by the container argument at the end of HTMLElement\n *\n * @param {HTMLElement} container\n * @param {String|HTMLElement} html\n * @return {HTMLElement} inserted element\n */\n\nfunction append(container, element) {\n  container.appendChild(element);\n  return element;\n}\n/**\n * Inserts content specified by the html argument at the beginning of HTMLElement\n *\n * @param {HTMLElement} container\n * @param {string|HTMLElement} html\n * @returns {HTMLElement} inserted container\n */\n\n\nfunction prepend(container, element) {\n  return container.insertBefore(element, container.firstChild);\n}\n/**\n * Inserts content specified by the html argument after the HTMLElement\n *\n * @param {HTMLElement} container\n * @returns {HTMLElement} inserted container\n */\n\n\nfunction after(container, element) {\n  return container.parentNode.insertBefore(element, container.nextSibling);\n}\n/**\n * Inserts content specified by the html argument before the HTMLElement\n *\n * @param {HTMLElement} container\n * @returns {HTMLElement} inserted container\n */\n\n\nfunction before(container, element) {\n  return container.insertBefore(element, container);\n}\n/**\n * Replaces given html container with content specified in html parameter\n *\n * @param {HTMLElement} container\n * @param {string|HTMLElement} html\n * @returns {HTMLElement} inserted container\n */\n\n\nfunction replace(container, element) {\n  return container.parentNode.replaceChild(element, container);\n}\n/**\n * Removes HTMLElement from dom tree\n *\n * @param {HTMLElement} container\n * @returns {HTMLElement} removed container\n */\n\n\nfunction remove(element) {\n  var parent = element.parentNode;\n  return parent.removeChild(element);\n}\n/**\n * [dispose description]\n * @return {Object} The class instance\n */\n\n\nfunction dispose(element) {\n  var el = element;\n  return el.parentNode ? el.parentNode.removeChild(el) : el;\n}\n/**\n * empty\n * @return {void}\n */\n\n\nfunction empty(element) {\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n}\n/**\n * [destroy description]\n * @return {Object} this class\n */\n\n\nfunction destroy(element) {\n  return element.parentNode.removeChild(element);\n}\n\nexport default {\n  append: append,\n  prepend: prepend,\n  after: after,\n  before: before,\n  replace: replace,\n  remove: remove,\n  destroy: destroy,\n  empty: empty,\n  dispose: dispose\n};","map":null,"metadata":{},"sourceType":"module"}
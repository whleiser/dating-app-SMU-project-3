{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport init from './component/init';\nimport _insert from './element/insert';\nimport classify from './component/classify';\nimport css from './module/css';\nimport events from './component/events';\nimport create from './element/create';\nimport emitter from './module/emitter';\nvar defaults = {\n  prefix: 'material',\n  class: 'drawer',\n  modifier: 'width',\n  state: 'closed',\n  position: 'left',\n  tag: 'div',\n  width: '340',\n  modules: [emitter, events]\n};\n/**\n * Class representing a UI Container. Can add components.\n *\n * @extends Component\n * @return {parent} The class instance\n * @example new Container({\n *   container: document.body\n * });\n */\n\nvar Drawer = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   * @param  {Object} options - Component options\n   * @return {Object} Class instance\n   */\n  function Drawer(options) {\n    _classCallCheck(this, Drawer);\n\n    this.options = Object.assign({}, defaults, options || {});\n    init(this);\n    this.build();\n    this.attach();\n    this.emit('ready');\n    return this;\n  }\n  /**\n   * Build Method\n   * @return {Object} This class instance\n   */\n\n\n  _createClass(Drawer, [{\n    key: \"build\",\n    value: function build() {\n      // console.log('build')\n      this.wrapper = create('div');\n      classify(this.wrapper, this.options);\n      this.root = create('aside');\n      css.add(this.root, 'drawer-panel');\n\n      _insert(this.root, this.wrapper);\n\n      if (this.options.position) {\n        css.add(this.root, 'position-' + this.options.position);\n      }\n\n      if (this.options.fixed) {\n        this.wrapper.classList.add('is-fixed');\n      }\n\n      if (this.options.size) {\n        if (this.options.position === 'top' || this.options.position === 'bottom') {\n          this.root.style = 'height: ' + this.options.size + 'px;';\n        } else {\n          this.root.style = 'width: ' + this.options.size + 'px;';\n        }\n      }\n\n      if (this.options.open) {\n        this.open();\n      }\n\n      if (this.options.container) {\n        _insert(this.wrapper, this.options.container);\n      }\n\n      this.emit('built', this.root);\n      return this;\n    }\n  }, {\n    key: \"attach\",\n    value: function attach() {\n      var _this = this;\n\n      // console.log('attach', this.options.type)\n      if (this.options.type === 'persistent') return;\n      if (this.options.type === 'permanent') return;\n      this.wrapper.addEventListener('click', function (e) {\n        // console.log('target', e.currentTarget)\n        if (_this.wrapper === e.currentTarget) {\n          _this.close();\n        }\n      });\n    }\n    /**\n     * [toggle description]\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      // console.log('toggle', this.root);\n      if (this.wrapper.classList.contains('show')) {\n        this.close();\n      } else {\n        this.open();\n      }\n\n      return this;\n    }\n    /**\n     * [minimize description]\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      // console.log('close');\n      css.remove(this.wrapper, 'show'); // css.remove(this.underlay, 'show')\n\n      return this;\n    }\n    /**\n     * [normalize description]\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      // console.log('open')\n      css.add(this.wrapper, 'show');\n      return this;\n    }\n    /**\n     * [insert description]\n     * @param  {?} container [description]\n     * @return {?}           [description]\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(container, context) {\n      _insert(this.wrapper, container, context);\n\n      return this;\n    }\n  }]);\n\n  return Drawer;\n}();\n\nexport default Drawer;","map":null,"metadata":{},"sourceType":"module"}
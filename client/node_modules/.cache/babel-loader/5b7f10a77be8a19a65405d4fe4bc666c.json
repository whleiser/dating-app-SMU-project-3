{"ast":null,"code":"'use strict'; // import Component from './component';\n\nimport _classCallCheck from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport create from './element/create';\nimport classify from './component/classify';\nimport css from './module/css';\nimport insert from './element/insert';\nvar defaults = {\n  prefix: 'material',\n  class: 'progress',\n  tag: 'div',\n  progress: '0%',\n  circular: \"<svg class=\\\"progress\\\" width=\\\"65px\\\" height=\\\"65px\\\" viewBox=\\\"0 0 66 66\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n      <circle class=\\\"path\\\" fill=\\\"none\\\" stroke-width=\\\"6\\\" stroke-linecap=\\\"round\\\" cx=\\\"33\\\" cy=\\\"33\\\" r=\\\"30\\\"></circle>\\n    </svg>\"\n};\n/**\n * The class represents an item ie for list\n *\n * @class\n * @return {Object} The class instance\n * @example new Item(object);\n */\n\nvar Spinner = /*#__PURE__*/function () {\n  /**\n   * init\n   * @return {Object} The class options\n   */\n  function Spinner(options) {\n    _classCallCheck(this, Spinner);\n\n    this.init(options);\n    this.build();\n    return this;\n  }\n  /**\n   * [init description]\n   * @param  {?} options [description]\n   * @return {?}         [description]\n   */\n\n\n  _createClass(Spinner, [{\n    key: \"init\",\n    value: function init(options) {\n      // merge options\n      this.options = Object.assign({}, defaults, options || {}); // define class\n      // assign modules\n\n      Object.assign(this, insert);\n    }\n    /**\n     * Build function for item\n     * @return {Object} This class instance\n     */\n\n  }, {\n    key: \"build\",\n    value: function build(options) {\n      this.root = create(this.options.tag);\n      classify(this.root, this.options);\n\n      if (this.options.type === 'circular') {\n        this.root.innerHTML = this.options.circular;\n      }\n\n      if (this.options.type === 'indeterminate') {\n        this.bar = create('div', 'bar');\n        insert(this.bar, this.root);\n      } else {\n        this.bar = create('div', 'bar');\n        insert(this.bar, this.root);\n        this.set(this.options.progress);\n      }\n\n      if (this.options.container) {\n        insert(this.root, this.options.container);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"set\",\n    value: function set(progress) {\n      this.bar.setAttribute('style', 'width: ' + progress);\n    }\n  }]);\n\n  return Spinner;\n}();\n\n;\nexport default Spinner;","map":null,"metadata":{},"sourceType":"module"}
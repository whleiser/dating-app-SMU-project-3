{"ast":null,"code":"'use strict'; // import control from '../control';\n// import control from './component/control'\n\nimport _classCallCheck from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _build from './element/build';\nimport emitter from './module/emitter';\nimport insert from './component/insert';\nimport attach from './module/attach';\nimport classify from './component/classify';\nvar defaults = {\n  prefix: 'material',\n  class: 'switch',\n  type: 'control',\n  label: null,\n  checked: false,\n  error: false,\n  value: false,\n  disabled: false,\n  build: ['$root.material-switch', {}, ['input$input$switch-input', {\n    type: 'checkbox'\n  }], ['span$control.switch-control', {}, ['span$track.switch-track', {}, ['span$knob.switch-knob', {}]]], ['label$label.switch-label']],\n  events: [['element.control.click', 'toggle'], // ['element.label.click', 'toggle'],\n  // for accessibility purpose\n  ['element.input.click', 'toggle'], ['element.input.focus', 'focus'], ['element.input.blur', 'blur'] // ['element.input.keydown', 'keydown']\n  ]\n};\n/**\n * Switch class\n * @class\n * @extends Control\n */\n\nvar Switch = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   * @param  {Object} options\n  - Component options\n   * @return {Object} Class instance\n   */\n  function Switch(options) {\n    _classCallCheck(this, Switch);\n\n    this.init(options);\n    this.build();\n    this.attach();\n    return this;\n  }\n  /**\n   * Constructor\n   * @param  {Object} options The class options\n   * @return {Object} This class instance\n   */\n\n\n  _createClass(Switch, [{\n    key: \"init\",\n    value: function init(options) {\n      this.options = Object.assign({}, defaults, options || {});\n      Object.assign(this, emitter, attach, insert);\n      this.value = this.options.value;\n      return this;\n    }\n    /**\n     * build method\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      this.element = _build(this.options.build);\n      this.root = this.element.root;\n      classify(this.root, this.options);\n\n      if (this.options.disabled) {\n        this.disable();\n      }\n\n      if (this.value) {\n        this.element.input.setAttribute('checked', 'checked');\n      }\n\n      this.element.input.setAttribute('aria-label', this.options.name);\n      var text = this.options.label || this.options.text || '';\n      this.element.label.textContent = text;\n      this.element.label.setAttribute('for', this.options.name);\n\n      if (this.options.checked) {\n        this.check(true);\n      }\n\n      if (this.options.container) {\n        this.insert(this.options.container);\n      }\n    }\n    /**\n     * Setter\n     * @param {string} prop\n     * @param {string} value\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(prop, value, silent) {\n      switch (prop) {\n        case 'value':\n          this.setValue(value, silent);\n          break;\n\n        case 'disabled':\n          if (value === true) {\n            this.disable();\n          } else if (value === false) {\n            this.enable();\n          }\n\n          break;\n\n        default:\n          this.setValue(prop, silent);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      return this.value;\n    }\n    /**\n     * set switch value\n     * @param {boolean} value [description]\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.value;\n    }\n    /**\n     * set switch value\n     * @param {boolean} value [description]\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(value, silent) {\n      // console.log('setValue', value)\n      this.check(value, silent);\n    }\n    /**\n      * [toggle description]\n      * @return {Object} The class instance\n      */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      if (this.disabled) return;\n      this.focus();\n\n      if (this.checked) {\n        this.check(false);\n      } else {\n        this.check(true);\n      }\n\n      return this;\n    }\n    /**\n     * Set checkbox value\n     * @param {boolean} value [description]\n     */\n\n  }, {\n    key: \"check\",\n    value: function check(checked, silent) {\n      // console.log('check', checked, silent)\n      if (checked === true) {\n        this.root.classList.add('is-checked');\n        this.element.input.checked = true;\n        this.checked = true;\n        this.value = true;\n\n        if (!silent) {\n          this.emit('change', this.checked);\n        }\n      } else {\n        this.root.classList.remove('is-checked');\n        this.element.input.checked = false;\n        this.checked = false;\n        this.value = false;\n\n        if (!silent) {\n          this.emit('change', this.checked);\n        }\n      }\n\n      return this;\n    }\n    /**\n     * [_onInputFocus description]\n     * @return {?} [description]\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (this.disabled === true) return this;\n      this.root.classList.add('is-focused');\n\n      if (this.element.input !== document.activeElement) {\n        this.element.input.focus();\n      }\n\n      return this;\n    }\n    /**\n     * [_onInputBlur description]\n     * @return {?} [description]\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.root.classList.remove('is-focused');\n      return this;\n    }\n  }]);\n\n  return Switch;\n}();\n\nexport default Switch;","map":null,"metadata":{},"sourceType":"module"}
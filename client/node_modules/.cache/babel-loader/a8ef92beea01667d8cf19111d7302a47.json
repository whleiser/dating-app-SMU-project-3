{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _init from './component/init';\nimport _build from './element/build';\nimport control from './component/control';\nimport events from './component/events';\nimport _insert from './element/insert';\nimport offset from './element/offset';\nimport classify from './component/classify'; // import control from './control';\n\nimport attach from './module/attach';\nimport css from './module/css';\nimport emitter from './module/emitter';\nimport icon from './skin/material/icon/pin.svg';\nvar defaults = {\n  prefix: 'material',\n  class: 'slider',\n  type: 'control',\n  label: null,\n  checked: false,\n  error: false,\n  value: false,\n  range: [0, 100],\n  step: 5,\n  modules: [events, control, emitter, attach],\n  mixins: [],\n  build: ['$root.material-slider', {}, ['label$label.slider-label', {}], ['input$input'], ['$control.slider-control', {}, ['$track.slider-track', {}, ['canvas$canvas.slider-canvas', {}], ['$trackvalue.slider-track-value', {}], ['$knob.slider-knob', {}], ['$marker.slider-marker', {}, ['$value.slider-value', {}]]]]],\n  events: [['element.input.focus', 'focus'], ['element.input.blur', 'blur']]\n};\n/**\n * Switch class\n * @class\n * @extends Control\n */\n\nvar Slider = /*#__PURE__*/function () {\n  /**\n   * init\n   * @return {Object} The class options\n   */\n  function Slider(options) {\n    _classCallCheck(this, Slider);\n\n    this.options = Object.assign({}, defaults, options || {});\n    this.init(this.options);\n    this.build(this.options);\n    this.attach();\n    return this;\n  }\n  /**\n   * Constructor\n   * @param  {Object} options The class options\n   * @return {Object} This class instance\n   */\n\n\n  _createClass(Slider, [{\n    key: \"init\",\n    value: function init(options) {\n      _init(this);\n\n      return this;\n    }\n    /**\n     * build method\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      var _this = this;\n\n      this.element = _build(this.options.build);\n      this.root = this.element.root;\n      classify(this.root, this.options);\n\n      if (this.options.container) {\n        _insert(this.root, this.options.container);\n      }\n\n      var value = this.element.marker.innerHTML;\n      this.element.marker.innerHTML = icon + value;\n\n      if (this.options.type) {\n        css.add(this.root, 'type-' + this.options.type);\n      } // init input\n\n\n      if (this.options.disabled) {\n        this.disable(true);\n      } // if (this.options.name) {\n      //   this.root.dataset.name = name\n      //   this.element.input.name = name\n      // }\n      // init text\n\n\n      var text = this.options.label || this.options.text;\n      this.element.label.textContent = text;\n      this.options.label = this.options.label || this.options.text;\n      this.initTrack();\n      var delay = 50;\n      setTimeout(function () {\n        _this.initCanvas();\n      }, delay);\n    }\n  }, {\n    key: \"initCanvas\",\n    value: function initCanvas() {\n      var _this2 = this;\n\n      window.addEventListener('resize', function () {\n        console.log('resize');\n\n        _this2.drawCanvas();\n      }, false);\n      this.drawCanvas();\n    }\n  }, {\n    key: \"drawCanvas\",\n    value: function drawCanvas() {\n      var width = offset(this.element.track, 'width');\n      var height = offset(this.element.track, 'height');\n      this.element.canvas.width = width;\n      this.element.canvas.height = height;\n      var context = this.element.canvas.getContext('2d');\n      context.lineWidth = 2;\n      context.beginPath();\n      context.moveTo(0, height / 2 + 1);\n      context.lineTo(width, height / 2 + 1);\n      context.strokeStyle = 'rgba(34, 31, 31, .26)';\n      context.stroke();\n    }\n    /**\n     * [buildControl description]\n     * @return {?} [description]\n     */\n\n  }, {\n    key: \"initTrack\",\n    value: function initTrack() {\n      var _this3 = this;\n\n      this.element.track.addEventListener('mousedown', function (ev) {\n        if (_this3.disabled === true) return;\n\n        _this3.initTrackSize();\n\n        var position = ev.layerX;\n\n        _this3.update(position);\n      });\n      this.element.knob.addEventListener('click', function (ev) {\n        ev.stopPropagation();\n      });\n      this.initDragging();\n      var delay = 100;\n      setTimeout(function () {\n        _this3.setValue(_this3.options.value);\n      }, delay);\n    }\n  }, {\n    key: \"initTrackSize\",\n    value: function initTrackSize() {\n      this._tracksize = offset(this.element.track, 'width');\n      this._knobsize = offset(this.element.knob, 'width');\n      this._markersize = 32;\n      /* offset(this.element.marker, 'width') */\n\n      this._trackleft = offset(this.element.track, 'left');\n      return this;\n    }\n    /**\n     * [initDragging description]\n     * @return {?} [description]\n     */\n\n  }, {\n    key: \"initDragging\",\n    value: function initDragging() {\n      var _this4 = this;\n\n      this.element.knob.onmousedown = function (e) {\n        if (_this4.disabled === true) return;\n        e.stopPropagation();\n        e = e || window.event;\n        css.add(_this4.element.control, 'dragging');\n        var start = 0;\n        var position = 0;\n        if (e.pageX) start = e.pageX;else if (e.clientX) start = e.clientX;\n        start = _this4._trackleft;\n\n        document.body.onmousemove = function (e) {\n          if (_this4.disabled === true) return;\n          console.log('mousedown', _this4.disabled);\n          e = e || window.event;\n          var end = 0;\n          if (e.pageX) end = e.pageX;else if (e.clientX) end = e.clientX;\n          position = end - start;\n\n          _this4.update(position);\n        };\n\n        document.body.onmouseup = function (e) {\n          document.body.onmousemove = document.body.onmouseup = null;\n          e = e || window.event;\n          var end = 0;\n          if (e.pageX) end = e.pageX;else if (e.clientX) end = e.clientX;\n          position = end - start;\n\n          _this4.update(position);\n\n          css.remove(_this4.element.control, 'dragging');\n        };\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(position) {\n      var size = this._tracksize;\n      var range = this.options.range[1] - this.options.range[0];\n\n      if (position > size) {\n        position = size;\n      }\n\n      if (position < 0) {\n        position = 0;\n      }\n\n      var ratio = size / position;\n      var value = Math.round(range / ratio) + this.options.range[0];\n\n      if (position === 0) {\n        css.remove(this.element.knob, 'notnull');\n      }\n\n      this.element.knob.style.left = position - this._knobsize / 2 + 'px';\n      this.element.trackvalue.style.width = position + 'px';\n      this.element.marker.style.left = position - this._markersize / 2 + 'px';\n      this.element.value.textContent = value;\n      this.element.input.value = value;\n\n      if (value > this.options.range[0]) {\n        css.add(this.element.knob, 'notnull');\n      } else {\n        css.remove(this.element.knob, 'notnull');\n      }\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(value) {\n      this.initTrackSize();\n      var size = offset(this.element.track, 'width');\n      size = parseInt(size);\n      var range = this.options.range[1] - this.options.range[0];\n      var ratio = value * 100 / range;\n      var position = Math.round(size * ratio / 100);\n      this.update(position);\n      return this;\n    }\n    /**\n     * [insert description]\n     * @param  {?} container [description]\n     * @param  {?} context   [description]\n     * @return {?}           [description]\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(container, context) {\n      _insert(this.root, container, context);\n    }\n    /**\n     * Setter\n     * @param {string} prop\n     * @param {string} value\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(prop, value) {\n      switch (prop) {\n        case 'value':\n          this.setValue(value);\n          break;\n\n        case 'label':\n          this.setLabel(value);\n          break;\n\n        default:\n          this.setValue(prop);\n      }\n\n      return this;\n    }\n    /**\n     * Getter\n     * @param {string} prop\n     * @param {string} value\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(prop) {\n      var value;\n\n      switch (prop) {\n        case 'value':\n          value = this.getValue();\n          break;\n\n        case 'name':\n          value = this.name;\n          break;\n\n        default:\n          return this.getValue();\n      }\n\n      return value;\n    }\n    /**\n     * [getValue description]\n     * @return {Object} The class instance\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.element.input.value;\n    }\n    /**\n     * [setValue description]\n     * @param {string} value [description]\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      value = value || this.options.range[0];\n      this.element.input.value = value;\n      this.updateValue(value);\n    }\n    /**\n     * [setLabel description]\n     * @param {?} text [description]\n     */\n\n  }, {\n    key: \"setLabel\",\n    value: function setLabel(text) {\n      text = text || this.options.label || this.options.text;\n\n      if (text !== null && this.label) {\n        this.label.textContent = text;\n      }\n    }\n  }]);\n\n  return Slider;\n}();\n\nexport default Slider;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import insert from '../element/insert';\nimport offset from '../element/offset';\nvar defaults = {\n  transition: '.5s cubic-bezier(0.4, 0.0, 0.2, 1)',\n  opacity: ['1', '.3']\n};\n/**\n * init ripple\n * @param  {?} container [description]\n * @return {?}           [description]\n */\n\nfunction init(instance) {\n  instance.on('built', function (container) {\n    set(container);\n  });\n}\n/**\n * this function set the event listener\n * @param {HTMLElement} container [description]\n */\n\n\nfunction set(container) {\n  container.addEventListener('mousedown', function (e) {\n    show(e);\n  });\n}\n/**\n * show method\n * @param  {event} e The event related to the the touch\n * @param  {Object} coord\n * @return {void}\n */\n\n\nfunction show(e) {\n  // console.log('show', e);\n  var container = e.target;\n  var offs = offset(container);\n  var ripple = document.createElement('div');\n  ripple.classList.add('material-ripple');\n  var end = coordinate(offs);\n  var initial = {\n    left: (e.offsetX || offs.width / 2) + 'px',\n    top: (e.offsetY || offs.height / 2) + 'px'\n  };\n  ripple.style.left = initial.left;\n  ripple.style.top = initial.top; // ripple.style.opacity = defaults.opacity[1]\n\n  ripple.style.transition = defaults.transition;\n  insert(ripple, container, 'top');\n  setTimeout(function () {\n    // console.log('style coord', end);\n    ripple.style.left = end.left;\n    ripple.style.top = end.top;\n    ripple.style.width = end.size;\n    ripple.style.height = end.size; // ripple.style.opacity = defaults.opacity[1]\n  }, 1);\n\n  document.body.onmouseup = function () {\n    destroy(ripple);\n  };\n}\n/**\n * this method hides the given ripple\n * @return {Object} Size and position\n */\n\n\nfunction destroy(ripple) {\n  if (ripple.parentNode) {\n    ripple.style.opacity = '0';\n  }\n\n  document.body.onmouseup = null;\n  setTimeout(function () {\n    if (ripple.parentNode) {\n      ripple.parentNode.removeChild(ripple);\n    }\n  }, 1000);\n}\n/**\n * Get ripple final coordinates\n * @return {Object} Size and position\n */\n\n\nfunction coordinate(o) {\n  var size = o.height;\n  var top = -o.height / 2;\n\n  if (o.width > o.height) {\n    top = -(o.width - o.height / 2);\n    size = o.width;\n  }\n\n  return {\n    size: size * 2 + 'px',\n    top: top + 'px',\n    left: size / -2 + 'px'\n  };\n}\n\nexport default init;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import extract from './extract';\n/**\n * attach function to events\n * @module module/attach\n * @category module\n */\n\n/**\n * [attach description]\n * @param  {object} component [description]\n * @param  {[type]} events    [description]\n * @return {[type]}           [description]\n */\n\nexport default {\n  attach: function attach(events) {\n    var _this = this;\n\n    // console.log('attach', events)\n    events = events || this.options.events;\n    if (!events) return; // console.log('attach', events, this)\n\n    var instance = this;\n    events.map(function (def) {\n      var e = extract.e(instance, def[0]);\n      var f = extract.f(instance, def[1]);\n      var keys = def[1].split('.');\n      keys.pop();\n\n      var bound = _this.last(keys.join('.'));\n\n      if (f && bound && e && e.element && e.element.addEventListener) {\n        if (!f) {\n          console.log('error');\n        }\n\n        e.element.addEventListener(e.name, f.bind(bound));\n      } else if (e && e.element && e.element.on && f && bound) {\n        e.element.on(e.name, f.bind(bound));\n      } else {\n        console.log('can\\'t attach', def[0]);\n      }\n    });\n    return this;\n  },\n\n  /**\n   * Return the last reference from an object\n   * @param  {string} str Object path for example key1.key2.key3\n   * @return {value} The value of the last reference\n   */\n  last: function last(str) {\n    // console.log('_path', str)\n    if (!str) return this;else if (!str.match(/\\./)) return this[str];\n    var last;\n    var keys = str.split('.');\n\n    for (var i = 0, l = keys.length; i < l; i++) {\n      var key = keys[i];\n      last = last || this;\n      last = last[key];\n    }\n\n    return last;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}
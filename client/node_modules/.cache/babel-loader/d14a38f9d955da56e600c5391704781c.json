{"ast":null,"code":"import _classCallCheck from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { is as isObject } from './module/object';\nimport css from './module/css';\nimport insert from './element/insert';\n/**\n *\n */\n\nvar Layout = /*#__PURE__*/function () {\n  /**\n   * [constructor description]\n   * @param  {?} schema    [description]\n   * @param  {?} container [description]\n   * @return {?}           [description]\n   */\n  function Layout(schema, container) {\n    _classCallCheck(this, Layout);\n\n    this.component = this.create(schema, container); // this.field = this.extractInfo(this.component)\n\n    return this;\n  }\n  /**\n   * [create description]\n   * @param  {?} schema    [description]\n   * @param  {?} container [description]\n   * @param  {?} structure [description]\n   * @return {?}           [description]\n   */\n\n\n  _createClass(Layout, [{\n    key: \"create\",\n    value: function create(schema, container, structure, level) {\n      level = level || 0;\n      level++; // console.log('level', level, schema)\n      // console.log('-------------')\n\n      structure = structure || {};\n      var component = null;\n\n      for (var i = 0; i < schema.length; i++) {\n        // console.log('index', i, typeof schema[i])\n        var name;\n        var options = {};\n\n        if (schema[i] instanceof Object && typeof schema[i] === 'function') {\n          if (isObject(schema[i + 2])) {\n            options = schema[i + 2];\n          }\n\n          if (typeof schema[i + 1] === 'string') {\n            name = schema[i + 1];\n\n            if (!schema[i].isElement && !schema[i].isComponent) {\n              options.name = name;\n            }\n          }\n\n          component = new schema[i](options);\n\n          if (name) {\n            structure[name] = component;\n          }\n\n          if (component) {\n            this.display(component.root, options);\n            this.style(component, options);\n          }\n\n          if (level === 1) {\n            var isClass = function isClass(fn) {\n              return /^\\sclass/.test(schema[i].toString());\n            }; // console.log('isClass', isClass)\n            // console.log('root', component.root)\n\n\n            structure.root = component.root;\n          }\n\n          if (component && container) {\n            if (component.insert) component.insert(container);else insert(component, container);\n            component._container = container;\n          }\n        } else if (Array.isArray(schema[i])) {\n          // console.log('------', schema[i])\n          if (component == null) {\n            component = container;\n          }\n\n          this.create(schema[i], component, structure, level);\n        }\n      }\n\n      return structure;\n    }\n    /**\n     * [_initFlexDirection description]\n     * @param  {Element} container Init direction for the given container\n     * @param  {string} direction (horizontal,vertical)\n     */\n\n  }, {\n    key: \"display\",\n    value: function display(element, options) {\n      var display = options.display;\n      var direction = options.direction || 'horizontal';\n      if (!element || !display) return;\n\n      if (direction === 'horizontal') {\n        element.className += ' ' + 'flex-row';\n      } else if (direction === 'vertical') {\n        element.className += ' ' + 'flex-column';\n      }\n    }\n    /**\n     * [style description]\n     * @param  {?} component [description]\n     * @return {?}           [description]\n     */\n\n  }, {\n    key: \"style\",\n    value: function style(component) {\n      var options = component.options || {}; // console.log('component', component);\n\n      if (options.flex) {\n        css.add(component.root, 'flex-' + options.flex);\n      } else {\n        var size = options.size;\n\n        if (options.size && options.width) {\n          component.root.width = size + 'px';\n        } else if (options.size && options.height) {\n          component.root.height = size + 'px';\n        }\n      }\n\n      if (options.position) {\n        component.root.position = options.position;\n      }\n\n      if (options.bottom) {\n        component.root.bottom = options.bottom;\n      }\n\n      if (options.hide) {\n        component.root.display = 'none';\n      }\n\n      if (options.theme) {\n        css.add(component.root, 'theme' + '-' + options.theme);\n      }\n    }\n  }, {\n    key: \"extractInfo\",\n    value: function extractInfo(object) {\n      // console.log('extractField', object)\n      var field = {};\n\n      for (var property in object) {\n        if (object.hasOwnProperty(property)) {\n          var infos = property.split(/\\./);\n\n          if (infos[0] === 'info' && infos[1] !== undefined) {\n            // console.log('field', infos[0], infos[1])\n            field[infos[1]] = object[property];\n          }\n        }\n      }\n\n      console.log('--- field', field);\n      return field;\n    }\n    /**\n     * [get description]\n     * @param  {?} name [description]\n     * @return {?}      [description]\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      if (name) return this.component[name];else return this.component;\n    }\n  }]);\n\n  return Layout;\n}();\n\nexport default Layout;","map":null,"metadata":{},"sourceType":"module"}
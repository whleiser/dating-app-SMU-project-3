{"ast":null,"code":"/**\n * Element style related methods\n * @module component/style\n */\nimport { _isIterable, _isLiteralObject, _isArray, _each } from '../module/utils';\n/**\n * Gets element's computed style\n * @param {string} prop\n * @returns {*}\n * @private\n */\n\nfunction get(element, style) {\n  // console.log('get', element, style);\n  // get array of elements\n  if (_isArray(style)) {\n    var css = {};\n\n    for (var i in list) {\n      css[list[i]] = this.get(element, list[i]);\n    }\n\n    return css;\n  } else {\n    var computedStyle;\n\n    if (typeof window.getComputedStyle === 'function') {\n      // normal browsers\n      computedStyle = window.getComputedStyle(element);\n    } else if (typeof document.currentStyle !== undefined) {\n      // other browsers\n      computedStyle = element.currentStyle;\n    } else {\n      computedStyle = element.style;\n    }\n\n    if (style) {\n      return computedStyle[style];\n    } else {\n      return computedStyle;\n    }\n  }\n}\n/**\n * set element style\n * @param { ? } element [description]\n * @param {?} style   [description]\n */\n\n\nfunction set(element, style) {\n  if (_isIterable(element) && _isLiteralObject(style)) {\n    _each(element, function (e) {\n      set(e, style);\n    });\n\n    return element;\n  }\n\n  if (_isLiteralObject(style)) {\n    // console.log('style', element, style);\n    for (var i in style) {\n      element.style[i] = style[i];\n    }\n\n    return style;\n  }\n\n  return false;\n}\n\nexport default {\n  get: get,\n  set: set\n};","map":null,"metadata":{},"sourceType":"module"}
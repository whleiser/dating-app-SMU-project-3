{"ast":null,"code":"/**\n * extract.e extract a event and the context\n * @param  {[type]} str [description]\n * @return {[type]}     [description]\n */\nfunction e(instance, ev) {\n  if (!ev) return instance;else if (!ev.match(/\\./)) {\n    return {\n      element: instance,\n      name: ev\n    };\n  }\n  var iteration;\n  var obj = {};\n  var element;\n  var keys = ev.split('.');\n\n  for (var i = 0, l = keys.length; i <= l; i++) {\n    var key = keys[i];\n    iteration = iteration || instance;\n    iteration = iteration[key];\n\n    if (i === keys.length - 2) {\n      element = iteration;\n    }\n  }\n\n  obj.element = element;\n  obj.name = keys[keys.length - 1];\n  return obj;\n}\n/**\n * extract.f extract a function from a string using dot\n * @param  {string} func A string representing a function accessible in dot notation\n * @return {function}      The function\n */\n\n\nfunction f(instance, func) {\n  if (!func) return;\n\n  if (typeof func === 'function') {\n    return func;\n  } else if (!func.match(/\\./)) return instance[func];\n\n  var iteration;\n  var keys = func.split('.');\n\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    iteration = iteration || instance;\n    iteration = iteration[key];\n  }\n\n  return iteration;\n}\n\nexport default {\n  e: e,\n  f: f\n};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hunterleiser/Desktop/dating-app-SMU-project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _insert from './element/insert';\nimport css from './module/css';\nimport emitter from './module/emitter';\nimport attach from './module/attach';\nimport controller from './component/controller'; // import component\n\nimport Layout from './layout';\nvar defaults = {\n  prefix: 'material',\n  class: 'form',\n  tag: 'div',\n  controls: ['textfield', 'checkbox', 'slider', 'switch']\n};\n/**\n * Form class\n *\n * @class\n * @return {Class} This class instance\n */\n\nvar Form = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   * @param  {Object} options - Component options\n   * @return {Object} Class instance\n   */\n  function Form(options) {\n    _classCallCheck(this, Form);\n\n    this.options = Object.assign({}, defaults, options || {});\n    this.init();\n    this.build();\n    this.attach();\n    return this;\n  }\n  /**\n   * Initialize View\n   * @return {void}\n   */\n\n\n  _createClass(Form, [{\n    key: \"init\",\n    value: function init() {\n      // init intanciate name\n      // implement module\n      Object.assign(this, emitter, attach, _insert);\n      this.document = window.document;\n      this.controller = controller; // need to remove the options template to have a reference\n\n      if (this.options.render) {\n        this.render = this.options.render;\n      } // this.key = {};\n\n\n      return this;\n    }\n    /**\n     * [_initForm description]\n     * @return {Object} This class instance\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      var tag = this.options.tag || 'div';\n      this.root = document.createElement(tag);\n      css.add(this.root, this.options.prefix + '-' + this.options.class); // complete layout options\n\n      this.options.root = this.root;\n      this.layout = new Layout(this.options.layout, this.root);\n\n      this._initControls(this.layout.controls);\n\n      return this;\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(container, context) {\n      _insert(this.root, container, context);\n\n      return this;\n    }\n    /**\n     * [_initControls description]\n     * @param  {?} controls [description]\n     * @return {?}          [description]\n     */\n\n  }, {\n    key: \"_initControls\",\n    value: function _initControls(controls) {\n      if (!controls) return;\n      this.key = this.key || {};\n\n      for (var i = 0; i < controls.length; i++) {\n        var control = controls[i]; // control.setAttribute('data-key', control.name);\n\n        this.key[control.name] = control;\n        control.on('change', function ()\n        /* value */\n        {// console.log('change', this.name, value);\n        });\n      }\n    }\n    /**\n     * [_onSubmit description]\n     * @return {void}\n     */\n\n  }, {\n    key: \"_onSubmit\",\n    value: function _onSubmit(e) {\n      e.preventDefault();\n    }\n    /**\n     * [initControl description]\n     * @param  {?} key     [description]\n     * @param  {?} section [description]\n     * @return {?}         [description]\n     */\n\n  }, {\n    key: \"initControl\",\n    value: function initControl(key, section) {\n      var name = key.name || 'undefined';\n      var control = this.render(key);\n\n      if (control) {\n        this.key[name] = control;\n        control.insert(section);\n        control.addEvent('keyup', function () {// console.log('change', name, control.get('value'));\n        });\n        control.setAttribute('data-key', name);\n      }\n\n      return this;\n    }\n    /**\n     * Getter\n     *\n     * @param {string} prop\n     * @param {string} value\n     * @return {Object|void}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(prop, value) {\n      switch (prop) {\n        case 'info':\n          return this.setInfo(value);\n\n        case 'schema':\n          return this.setSchema(value);\n\n        default:\n          return this.setInfo(prop);\n      }\n    }\n    /**\n     * [setInfo description]\n     * @param {?} info [description]\n     */\n\n  }, {\n    key: \"setInfo\",\n    value: function setInfo(info) {\n      this.info = this.original = info;\n      this.parseInfo(info);\n    }\n    /**\n     * [parseInfo description]\n     * @param  {?} obj  [description]\n     * @param  {?} name [description]\n     * @param  {?} i    [description]\n     * @return {?}      [description]\n     */\n\n  }, {\n    key: \"parseInfo\",\n    value: function parseInfo(obj, name, i) {\n      // console.log('parseInfo', obj, name, 'level ' + i);\n      var level = i || 0;\n      level = level + 1;\n      var key;\n\n      if (obj instanceof Object) {\n        for (key in obj) {\n          if (obj.hasOwnProperty(key)) {\n            // recursive call to scan property\n            var n = null;\n\n            if (name) {\n              n = name + '.' + key;\n            } else {\n              n = key;\n            }\n\n            this.parseInfo(obj[key], n, level);\n          }\n        }\n      } else {\n        if (this.key[name] && this.key[name].set) {\n          this.key[name].set(obj);\n        }\n      }\n    }\n    /**\n     * Getter\n     *\n     * @param {string} prop\n     * @param {string} value\n     * @return {Object|void}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(prop, value) {\n      switch (prop) {\n        case 'key':\n          return this.getValue(value);\n\n        case 'info':\n          return this.getInfo();\n\n        case 'original':\n          return this.original;\n\n        case 'options':\n          return this.options;\n\n        default:\n          // default will replace the old method see up\n          return this.getInfo();\n      }\n    } // /**\n    //  * Get Value for the given key\n    //  * @param  {string} name defined in dot notation\n    //  * @param  {Object} info\n    //  * @return {Mixin} The Value of the given key\n    //  */\n    // getValue(name, info) {\n    //   var keys = name.split(/\\./);\n    //   var value = null;\n    //   if (!name || !info) {\n    //     return;\n    //   }\n    //   //_log.debug('getValueFromKey', name, info);\n    //   if (keys.length === 1) {\n    //     value = info[keys[0]];\n    //   }\n    //   if (keys.length === 2 && info[keys[0]]) {\n    //     if (info[keys[0]]) {\n    //       value = info[keys[0]][keys[1]];\n    //     }\n    //   }\n    //   if (keys.length === 3) {\n    //     if (info[keys[0]]) {\n    //       if (info[keys[0]][keys[1]]) {\n    //         value = info[keys[0]][keys[1]][keys[2]];\n    //       }\n    //     }\n    //   }\n    //   return value;\n    // }\n\n  }, {\n    key: \"getInfo\",\n    value: function getInfo() {\n      return this.info;\n    }\n  }]);\n\n  return Form;\n}();\n\nexport default Form;","map":null,"metadata":{},"sourceType":"module"}